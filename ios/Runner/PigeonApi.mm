// Autogenerated from Pigeon (v25.3.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "PigeonApi.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static FlutterError *createConnectionError(NSString *channelName) {
  return [FlutterError errorWithCode:@"channel-error" message:[NSString stringWithFormat:@"%@/%@/%@", @"Unable to establish connection on channel: '", channelName, @"'."] details:@""];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface NativeBean ()
+ (NativeBean *)fromList:(NSArray<id> *)list;
+ (nullable NativeBean *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface FlutterBean ()
+ (FlutterBean *)fromList:(NSArray<id> *)list;
+ (nullable FlutterBean *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation NativeBean
+ (instancetype)makeWithId:(NSInteger )id
    name:(NSString *)name {
  NativeBean* pigeonResult = [[NativeBean alloc] init];
  pigeonResult.id = id;
  pigeonResult.name = name;
  return pigeonResult;
}
+ (NativeBean *)fromList:(NSArray<id> *)list {
  NativeBean *pigeonResult = [[NativeBean alloc] init];
  pigeonResult.id = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.name = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable NativeBean *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [NativeBean fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.id),
    self.name ?: [NSNull null],
  ];
}
@end

@implementation FlutterBean
+ (instancetype)makeWithFId:(NSInteger )fId
    fName:(NSString *)fName {
  FlutterBean* pigeonResult = [[FlutterBean alloc] init];
  pigeonResult.fId = fId;
  pigeonResult.fName = fName;
  return pigeonResult;
}
+ (FlutterBean *)fromList:(NSArray<id> *)list {
  FlutterBean *pigeonResult = [[FlutterBean alloc] init];
  pigeonResult.fId = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.fName = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable FlutterBean *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FlutterBean fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.fId),
    self.fName ?: [NSNull null],
  ];
}
@end

@interface nullPigeonApiPigeonCodecReader : FlutterStandardReader
@end
@implementation nullPigeonApiPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: 
      return [NativeBean fromList:[self readValue]];
    case 130: 
      return [FlutterBean fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface nullPigeonApiPigeonCodecWriter : FlutterStandardWriter
@end
@implementation nullPigeonApiPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[NativeBean class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FlutterBean class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface nullPigeonApiPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation nullPigeonApiPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[nullPigeonApiPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[nullPigeonApiPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *nullGetPigeonApiCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    nullPigeonApiPigeonCodecReaderWriter *readerWriter = [[nullPigeonApiPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpFlutterToNative(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FlutterToNative> *api) {
  SetUpFlutterToNativeWithSuffix(binaryMessenger, api, @"");
}

void SetUpFlutterToNativeWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FlutterToNative> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.myflutterproject.FlutterToNative.loadNativeInfo", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetPigeonApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(loadNativeInfoId:error:)], @"FlutterToNative api (%@) doesn't respond to @selector(loadNativeInfoId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_id = [GetNullableObjectAtIndex(args, 0) integerValue];
        FlutterError *error;
        NativeBean *output = [api loadNativeInfoId:arg_id error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface NativeToFlutter ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@property(nonatomic, strong) NSString *messageChannelSuffix;
@end

@implementation NativeToFlutter

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  return [self initWithBinaryMessenger:binaryMessenger messageChannelSuffix:@""];
}
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger messageChannelSuffix:(nullable NSString*)messageChannelSuffix{
  self = [self init];
  if (self) {
    _binaryMessenger = binaryMessenger;
    _messageChannelSuffix = [messageChannelSuffix length] == 0 ? @"" : [NSString stringWithFormat: @".%@", messageChannelSuffix];
  }
  return self;
}
- (void)getFlutterInfoId:(NSInteger)arg_id completion:(void (^)(FlutterBean *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.myflutterproject.NativeToFlutter.getFlutterInfo", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetPigeonApiCodec()];
  [channel sendMessage:@[@(arg_id)] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        FlutterBean *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
@end

